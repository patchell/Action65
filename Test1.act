MODULE

CHAR ARRAY DataBuff(100)
INT POINTER ARRAY Avar,x,y,z
CARD Cvar
CHAR Stuff,Yep
TYPE  Junk = [
	CHAR q,e,d
	INT POINTER pX
]

INT FUNC FuncName2(CARD POINTER c100, c101 CHAR ARRAY POINTER h190)
	CARD cx100
	CHAR POINTER pData
	CHAR ARRAY aData(32)
	CHAR POINTER ARRAY paData

	RETURN cx100 - Stuff

PROC ProcNum1(BYTE a100, a101 INT i100)
	BYTE x100

	RETURN

INTERRUPT Hey()
	TYPE Crud = [
		INT CrudOne
		CHAR CrudTwo
	]
	INT POINTER ARRAY POINTER cc
	CHAR la,lb
	CARD lc,ld,le
	BYTE lf

	ASM {
		SECTION "Code" [
			START = $8000
			SIZE  = $1000
			MODE  = READ_ONLY
		]
		SECTION "Page2" [
			START = $0200
			SIZE = $100
			MODE = READ_WRITE
		]
		SECTION "PageZero" [
			START = $0000
			SIZE = $100
			MODE = READ_WRITE
			ZEROPAGE = TRUE
		]
		:StirageA	DS	64
		:StorageB	DS	$10
		:First	DB	0
		SET SECTION "Page2"
		:Second	DB	1
		:ThirdW DW 77
		:ForthL DL $1234FEBA

		SET SECTION "Code"
		:CodeDB	DB	1,2,3,4,5,6,7,8,'a','b','c'
		:Astring DAS "This is an ACTION! string"
		:CString DCS "This is a C String"
:Start	STY	First
		STY First,.X
:Here	STY Second

		STX	First
		STX First, .Y
:We		STX	Second

		POP .A
		POP .Y
		PUSH .X

		IFF .A = First THEN We FFI
		JSR Again
:Are	JSR Go

		JMP	First
		JMP Second
		JMP (First)
		JMP (Second)

		BEQ Are
		BNE Are
		BVS Are
		BVC Are
		BMI Are
		BPL Are

:Go		DEC	First
		DEC First,.X
:Again		DEC Second
		DEC Second, .X

		INC	First
		INC First,.X
		INC Second
		INC Second, .X

		CPY	#$4a
		CPY First
		CPY Second

		CPX	#$6b
		CPX	First
		CPX	Second

		BIT	First
		BIT Second

		ASL .A
		LSR	.A
		ROR .A
		ROL	.A
		ASL	First
		ASL	First, .X
		ASL	Second
		ASL	Second, .X

		BRK	//implicit addressing
		CLC
		CLD
		CLI
		CLV
		DEX
		DEY
		INX
		INY
		NOP
		PHA
		PLA
		PHP
		PLP
		RTI
		RTS
		SEC
//		SED
		SEI
		TAX
		TAY
		TXA
		TYA
		TXS
		TSX

		LDA #$4A
		LDA (First),.Y
		LDA #>$ABCD
		LDA #<$ABCD
		LDA First
		LDA First,.X
		LDA Second
		LDA Second, .X
		LDA Second, .Y
		LDA (First,.X)
		LDA First + 2

		LDX #$45
		LDX First
		LDX First,.Y
		LDX Second
		LDX Second, .Y

		LDY #$61
		LDY First
		LDY First, .X
		LDY Second
		LDY Second,.X
	}
	DO
		DO
		OD
	OD
	IF la = lb THEN
		la ==+ lb - le
	ELSEIF ld < lf THEN
		la = lb * le
	ELSEIF ld > lf THEN
		la = lb / le
	ELSE
		EXIT
	FI
	FOR lf = 0 TO 14 STEP 2
	DO
		la = lf RSH ld
	OD
	WHILE lc < ld
	DO
		la = lf LSH ld
	OD
	DO
		la = lb * lc - lf
		EXIT
	OD
	BREAK
	RTI
	EXIT
	RETURN
	RETURN la - lb

	Avar = x + y
	Avar ==* x + y
	Avar ==& x + y
	Avar ==% x + y
	Avar ==LSH x + y
	Avar ==XOR x + y
	Avar ==MOD x + y
	RETURN

MODULE
CHAR xyx, yxy
CARD one,two, three


