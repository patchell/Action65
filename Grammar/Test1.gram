//----------------------------------
// ACTION! compiler for the 6502
// Version 0.0.1 Nov 27, 2024
//----------------------------------

TERMINALS
	"IDENT" = 256,
	"NUMBER",
	"STRING",
	"VECTOR",
	"MODULE",
	"RETURN",
	"PROC",
	"FUNC",
	"INTERRUPT",
	"INTERRUPT_IDENT",
	"PROC_IDENT",
	"FUNC_IDENT",
	"FOR",
	"WHILE",
	"DO",
	"OD",
	"BEGIN",
	"END",
	"EXIT",
	"IF",
	"THEN",
	"ELSEIF",
	"ELSE",
	"FI",
	"IFF",
	"FFI",
	"UNTILL",
	"TO",
	"STEP",
	"OR",		// Logical OR operator
	"AND",		// Logical AND operator or cpu AND opcode
	"GTEQ",
	"LTEQ",
	"DEFINE",
	"TYPE",
	"RECORDTYPE",
	"BOOL",
	"CHAR",
	"BYTE",
	"CARD",
	"INT",
	"POINTER",
	"ARRAY",
	"PUSH",
	"POP",
	"BREAK",
	"BITS",
	"ACC",
	"XREG",
	"YREG",
	"ASM",
	//Assembler Tokens
	"SECTION",
	"START",
	"SIZE",
	"MODE",
	"ZEROPAGE",
	"READ_ONLY",
	"READ_WRITE",
	"true",
	"false",
	"ORG",
	"DB",
	"DW",
	"DL",
	"DAS",	//ACTION! STRING
	"DCS",	// 'C' STRING
	"DS",	// DEFINE STORAGE, BLOCK OF MEMORY
	"ASMPROC",
	"EPROC",
	"LOCAL_LABLE",
	"GLOBAL_LABLE",
	"GLOBAL_LABLE",
	"ADC",
//	"AND",		// see logical AND
	"ASL",
	"BCC",
	"BCS",
	"BEQ",
	"BMI",
	"BNE",
	"BPL",
	"BVC",
	"BVS",
	"BIT",
	"BRK",
	"CLC",
	"CLD",
	"CLI",
	"CLV",
	"CMP",
	"CPX",
	"CPY",
	"DEC",
	"DEX",
	"DEY",
	"EOR",
	"INC",
	"INX",
	"INY",
	"JMP",
	"JSR",
	"LDA",
	"LDX",
	"LDY",
	"LSR",
	"NOP",
	"ORA",
	"PHA",
	"PLA",
	"PHP",
	"PLP",
	"ROL",
	"ROR",
	"RTI",
	"RTS",
	"SBC",
	"STA",
	"SEC",
	"SED",
	"SEI",
	"STX",
	"STY",
	"TAX",
	"TAY",
	"TXA",
	"TYA",
	"TXS",
	"TSX",
	"X",
	"Y",
	"A",
	"SR",		// Status Register
	"@",		// address of operator
	".",		// record field operator
	"^",		// pointer dereference
	"!",
	"XOR",
	"&",		// bitwise AND
	"%",		// bitwise OR
	"#",		// Not equals
	">",		// greater than
	"<",		// less than
	"{",
	"}",
	"=",		// assignment or equal to
	"==+",
	"==-",
	"==*",
	"==/",
	"==MOD",
	"==&",
	"==!",
	"==XOR",
	"==%",
	"==LSH",
	"==RSH",
	"[",
	"]",
	",",
	";",
	"+",
	"-",
	"*",
	"/",
	"MOD",
	"LSH",
	"RSH",
	"(",
	")",
	"NEG",		//cpu 'N'eg status register flage
	"CARRY",		// cpu 'C'arry status register flag
	"ZERO",		// cpu 'Z'ero status register flag
	"OVERFLOW"		// cpu 'O'verflow status register flag

GRAMMAR

//----------------------------------
// Identifiers
//BYTE a,b;
//BYTE x=$a0
//BYTE y=[15]
//BYTE ARRAY a=$2000
//BYTE ARRAY b =["This is a string"]
//BYTE ARRAY c = [1 2 3 4 55 6]
//BYTE ARRAY d(156) =$2100
//----------------------------------

Ident		-> IdentInit Ident_1;
Ident_1		-> 'IDENT' IdentInit
			-> .
			;
//--------------------------------------
// Arithmetic Expressions
//--------------------------------------

ArithExpr	-> BitwiseAND BitwiseOR_1;
BitwiseOR_1	-> '%' BitwiseAND BitwiseOR_1
			-> .
			;

BitwiseAND		-> BitwiseXOR BitwiseAND_1;
BitwiseAND_1	-> '&' BitwiseXOR BitwiseAND_1
				-> .
				;

BitwiseXOR		-> AddExpr BitwiseXOR_1;
BitwiseXOR_1	-> '!' AddExpr BitwiseXOR_1
				-> 'XOR' AddExpr BitwiseXOR_1
				-> .
				;

AddExpr	-> ShifExpr AddExpr_1;
AddExpr_1	-> '+' ShifExpr AddExpr_1
			-> '-' ShifExpr AddExpr_1
			-> .
			;

ShifExpr	-> MultExpr ShiftExpr_1;
ShiftExpr_1	-> 'LSH' MultExpr ShiftExpr_1
			-> 'RSH' MultExpr ShiftExpr_1
			-> .
			;

MultExpr	-> Unary MultExpr_1;
MultExpr_1	-> '*' Unary MultExpr_1
			-> '/' Unary MultExpr_1
			-> 'MOD' Unary MultExpr_1
			-> .
			;

Unary	-> '-' Unary
		-> Factor
		;

Factor		-> Value Factor_1;
Factor_1	-> '(' ArithExpr ')'
			-> .
			;
		 

IdentInit	-> ArrayDim IdentInit_1;
IdentInit_1	-> '=' Address
			-> .
			;

Address		-> CompConst Address_1;
Address_1	-> '[' Data ']'
			-> .
			;
Data		-> ConstList Data_1;
Data_1		-> 'STRING'
			-> .
			;
ArrayDim	-> ArrayDim_1;
ArrayDim_1	-> '(' CompConst ')'
			-> .
			;


//-------------------------------
// Compiler Constants
//-------------------------------
ConstList	-> CompConst ConstList_1;
ConstList_1	-> ',' CompConst ConstList_1
			-> .
			;
CompConst		-> BaseCompConst CompConst_1;
CompConst_1		-> '+' BaseCompConst CompConst_1
				-> '-' BaseCompConst CompConst_1
				-> .
				;
BaseCompConst	-> 'NUMBER'
				-> '*'
				-> '@' MemContentsType
				-> 'INTERRUPT_IDENT'
				-> 'FUNC_IDENT'
				-> 'PROC_IDENT'
				-> .
				;

//----------------------------------
//Variable References
//Memory References
//----------------------------------

Value			-> MemContentsType Value_1;
Value_1			-> 'NUMBER'
				-> 'PUSH'		// current memroy location
				-> '@' AddressOf
				-> .
				;

AddressOf		-> MemContentsType AddressOf_1;
AddressOf_1		-> 'PROC_IDENT'
				-> 'FUNC_IDENT'
				-> 'INTERRUPT_IDENT'
				-> .
				; 

MemContentsType		-> MemContents MemContentsType_1;
MemContentsType_1 	//-> '(' ArithExpr ')'	//array ref
					-> '^'					// Pointer Dereference
					-> '.' MemContents MemContentsType_1		//record ref
					-> .
					;

MemContents		-> 'IDENT'
				-> .
				;
