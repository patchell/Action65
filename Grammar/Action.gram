TERMINALS
	"IDENT" = 256,
	"EOL",		//end of line
	"VECTOR",
	"GLOBALS",
	"ROUTINES",
	"MODULE",
	"RETURN",
	"PROC",
	"FUNC",
	"FUNC_CALL",
	"PROC_CALL",
	"IF",
	"FOR",
	"WHILE",
	"DO",
	"OD",
	"EXIT",
	"THEN",
	"FI",
	"ELSEIF",
	"ELSE",
	"UNTILL",
	"TO",
	"STEP",
	"OR",
	"AND",
	"GTEQ",
	"LTEQ",
	"NUMBER",
	"DEFINE",
	"TYPE",
	"RECORDTYPE",
	"BOOL",
	"CHAR",
	"BYTE",
	"CARD",
	"INT",
	"POINTER",
	"ARRAY",
	"INTERRUPT",
	"PUSH",
	"POP",
	"ACC",
	"XREG",
	"YREG",
	"ASM",
	"ADC",
	"AND",
	"ASL",
	"BCC",
	"BCS",
	"BEQ",
	"BMI",
	"BNE",
	"BPL",
	"BVC",
	"BVS",
	"BIT",
	"BRK",
	"CLC",
	"CLD",
	"CLI",
	"CLV",
	"CMP",
	"CPX",
	"CPY",
	"DEC",
	"DEX",
	"DEY",
	"EOR",
	"INC",
	"INX",
	"INY",
	"JMP",
	"JSR",
	"LDA",
	"LDX",
	"LDY",
	"LSR",
	"NOP",
	"ORA",
	"PHA",
	"PLA",
	"PHP",
	"PLP",
	"ROL",
	"ROR",
	"RTI",
	"RTS",
	"SBC",
	"STA",
	"SEC",
	"SED",
	"SEI",
	"STX",
	"STY",
	"TAX",
	"TAY",
	"TXA",
	"TYA",
	"TXS",
	"TSX",
	"X",
	"Y",
	"A",
	"SR",		// Status Register
	"@",
	".",
	"^",
	"!",
	"XOR",
	"&",
	"%",
	"#",
	">",
	"<",
	"{",
	"}",
	"=",
	"==+",
	"==-",
	"==*",
	"==/",
	"==MOD",
	"==&",
	"==!",
	"==XOR",
	"==%",
	"==LSH",
	"==RSH",
	"[",
	"]",
	",",
	";",
	"+",
	"-",
	"*",
	"/",
	"MOD",
	"LSH",
	"RSH",
	"(",
	")"
GRAMMAR
//--------------------------------
// Program Structure
//--------------------------------
Action65	-> Modules;

Modules		-> Vector Modules_1;
Modules_1	-> 'MODULE' Vector Modules_1
			-> .
			;

Vector			-> PROCroutine Vector_1;
Vector_1		-> 'VECTOR' VectorAddress PROCroutine Vector_1
				-> .
				;
VectorAddress	-> '(' CompConst ')' '=' CompConst;

PROCroutine		-> SysDecl PROCroutine_1;
PROCroutine_1	-> 'PROC' ProcDef SysDecl PROCroutine_1
				-> 'INTERRUPT' IrqDef SysDecl PROCroutine_1
				-> .
				;

IrqDef		-> IrqDecl IrqBody;
ProcDef		-> ProcDecl ProcBody;
FuncDef		-> FuncDecl FuncBody;

IrqDecl		-> 'IDENT' OptInit '(' ')';
ProcDecl	-> 'IDENT' OptInit '(' ParamList ')';
FuncDecl	-> 'IDENT' OptInit '(' ParamList ')';

OptInit		-> '=' CompConst
			-> .
			;

IrqBody		-> LocalDecls Statements;

ProcBody	-> LocalDecls Statements;

FuncBody	-> LocalDecls Statements;

//------------------------------------------
// Statements
//------------------------------------------


//---------------------------------------
// Proceedure Call
//---------------------------------------
Statements		->ForStmt ProcCall_1;
ProcCall_1		-> 'PROC_CALL' ProcParams ForStmt ProcCall_1
				-> 'FUNC_CALL' ProcParams ForStmt ProcCall_1
				-> .
				;
ProcParams	-> '(' MemContentsList ProcParams
			-> ')';

//------------------------------------------------
// FOR statement
//------------------------------------------------
ForStmt			-> IfStmt ForStmt_1;
ForStmt_1		-> 'FOR' Iterator DoStmt IfStmt ForStmt_1
				-> .
				;
Iterator	-> 'IDENT' Start  Finish STEPoption ;
Start		-> '=' ArithExpr;
Finish		-> 'TO' ArithExpr;
STEPoption	-> 'STEP' ArithExpr
			-> .
			;

//------------------------------------------------
// IF statement
//------------------------------------------------
IfStmt			-> WhileStmt IfStmt_1;
IfStmt_1		-> 'IF' If WhileStmt IfStmt_1
				-> .
				;
If			-> RelOperation ThenPart;
ThenPart	-> ElseIfPart ThenPart_1;
ThenPart_1	-> 'THEN' Statements ElseIfPart;
ElseIfPart	-> ElsePart ElseIfPart_1;
ElseIfPart_1-> 'ELSEIF' RelOperation ThenPart ElsePart
			-> .
			;
ElsePart	-> 'ELSE' Statements ElsePart
			-> 'FI'
			-> .
			;

//-------------------------------------------------
// WHILE Statement
//-------------------------------------------------
WhileStmt		-> DoStmt WhileStmt_1;
WhileStmt_1		-> 'WHILE' RelOperation  DoStmt WhileStmt_1
				-> .
				;

//------------------------------------------------
// DO Statement
//------------------------------------------------
DoStmt			-> EXITstmt DoStmt_1;
DoStmt_1		-> 'DO' Statements 
				-> 'OD' EXITstmt DoStmt_1
				-> .
				;

//---------------------------------------------------
// EXIT Statement
//---------------------------------------------------
EXITstmt		-> RetStmt EXITstmt_1;
EXITstmt_1		-> 'EXIT' RetStmt EXITstmt_1
				-> .
				;
//-------------------------------------------------
// RETURN Statement
//-------------------------------------------------
RetStmt		-> InlineAssembly RetStmt_1;
RetStmt_1	-> 'RETURN' OptReturnValue  InlineAssembly RetStmt_1
				-> .
				;
OptReturnValue	-> '(' ArithExpr OptReturnValue
				-> ')'
				-> .
				;
//---------------------------------------------
// Inline Assembly Code
//---------------------------------------------
InlineAssembly		-> CodeBlock InlineAssembly_1;
InlineAssembly_1	-> 'ASM' InlineAssBlock InlineAssembly_1
					-> .
					;

InlineAssBlock		-> '{' InlineAssBlock_1;
InlineAssBlock_1	-> AsmStmt InlineAssBlock_1
					-> '}'
					-> .
					;
//-----------------------------------------------
// CODE (Kluge) BLOCK statement
//-----------------------------------------------
CodeBlock		-> UntillStmt CodeBlock_1;
CodeBlock_1		-> '[' ConstList 
				-> ']' UntillStmt CodeBlock_1
				-> .
				;
ConstList	-> CompConst ConstList_1;
ConstList_1	-> ',' CompConst ConstList_1
			-> .
			;

//---------------------------------------------------
// UNTILE Statement
//---------------------------------------------------
UntillStmt		-> Assignment UntillStmt_1;
UntillStmt_1	-> 'UNTILL' RelOperation Assignment UntillStmt_1
				-> .
				;
//---------------------------------------------------
// Assignment Statements
//---------------------------------------------------

Assignment	-> MemContents Assignment_1;
Assignment_1->  '=' ArithExpr MemContents Assignment_1
			-> '==+' ArithExpr  MemContents Assignment_1
			->  '==-' ArithExpr  MemContents Assignment_1
			->  '==*' ArithExpr  MemContents Assignment_1
			->  '==/' ArithExpr MemContents Assignment_1
			->  '==MOD' ArithExpr MemContents Assignment_1
			->  '==&' ArithExpr	MemContents Assignment_1	// AND
			->  '==!' ArithExpr MemContents Assignment_1	//XOR
			->  '==%' ArithExpr 	MemContents Assignment_1//OR
			->  '==LSH' ArithExpr MemContents Assignment_1
			->  '==RSH' ArithExpr MemContents Assignment_1
			-> .
			;

//--------------------------------------
// Arithmetic Expressions
//--------------------------------------

RelOperation	-> LogicalOR RelOperation_1;
RelOperation_1	-> '>' LogicalOR RelOperation_1
				-> '<' LogicalOR RelOperation_1
				-> 'GTEQ' LogicalOR RelOperation_1
				-> 'LTEQ' LogicalOR RelOperation_1
				-> '=' LogicalOR RelOperation_1
				-> '#' LogicalOR RelOperation_1	//not equal
				-> .
				;

LogicalOR	-> LogicalAND LogicalOR_1;
LogicalOR_1	-> 'OR' LogicalAND LogicalOR_1
			-> .
			;

LogicalAND		-> ArithExpr LogicalAND_1;
LogicalAND_1	-> 'AND' ArithExpr LogicalAND_1
				-> .
				;

ArithExpr	-> BitwiseAND BitwiseOR_1;
BitwiseOR_1	-> '%' BitwiseAND BitwiseOR_1
			-> .
			;

BitwiseAND		-> BitwiseXOR BitwiseAND_1;
BitwiseAND_1	-> '&' BitwiseXOR BitwiseAND_1
				-> .
				;

BitwiseXOR	-> AddExpr BitwiseXOR_1;
BitwiseXOR_1	-> '!' AddExpr BitwiseXOR_1
				-> 'XOR' AddExpr BitwiseXOR_1
				-> .
				;

AddExpr	-> ShifExpr AddExpr_1;
AddExpr_1	-> '+' ShifExpr AddExpr_1
			-> '-' ShifExpr AddExpr_1
			-> .
			;

ShifExpr	-> MultExpr ShiftExpr_1;
ShiftExpr_1	-> 'LSH' MultExpr ShiftExpr_1
			-> 'RSH' MultExpr ShiftExpr_1
			-> .
			;

MultExpr	-> Unary MultExpr_1;
MultExpr_1	-> '*' Unary MultExpr_1
			-> '/' Unary MultExpr_1
			-> 'MOD' Unary MultExpr_1
			-> .
			;

Unary	-> '-' Unary
		-> Factor
		;

Factor	-> 'FUNC_IDENT' ProcParams
		-> '(' ArithExpr ')'
		-> IDENT MemContentsType
		-> BaseCompConst
		;
		 

MemContentsList		-> MemContents MemContentsList_1;
MemContentsList_1	-> ',' MemContents MemContentsList_1
					-> .
					;
//-------------------------------------------
// Declarations
//-------------------------------------------
// DEFINE declaration  Sort of a MACRO defination
//-------------------------------------------
SysDecl		-> TypeDefDecl Define;
Define	-> 'DEFINE' DefList TypeDefDecl Define
			-> .
			;
DefList	-> Def DefList_1;
DefList_1	-> ',' Def DefList_1
			-> .
			;
Def		-> IDENT '=' CompConst;

//----------------------------------------------
// TYPE Defination  Creates User define data
// record.
//----------------------------------------------
TypeDefDecl		-> FundDecl TypeDefDecl_1;
TypeDefDecl_1	-> 'TYPE' RecDefIdent FundDecl TypeDefDecl_1
				-> .
				;
RecDefIdent		-> 'IDENT' RecDefField
				-> .
				;
RecDefField		->  '=' '[' RecDefVarDecls ']'
				-> .
				;

RecDefVarDecls		-> RecDefVarDecl RecDefVarDecls_1;
RecDefVarDecls_1		-> ',' RecDefVarDecl RecDefVarDecls_1
				-> .
				;

RecDefVarDecl	-> 'CHAR' RecDefModifier  
				-> 'BYTE' RecDefModifier  
				-> 'INT' RecDefModifier  
				-> 'CARD' RecDefModifier  
				-> 'BOOL' RecDefVarList
				-> .
				;

RecDefVarList		-> IDENT RecDefVarList
					-> ',' RecDefVarList
					-> .
					;
RecDefModifier		-> RecDefArray RecDefPointer;
RecDefPointer		-> 'POINRTER' RecDefArray
				-> .
				;

RecDefArray		-> RecDefIdentList RecDefArray_1;
RecDefArray_1		-> 'ARRAY' RecDefIdentList
				-> .
				;

RecDefIdentList	-> Ident RecDefIdentList_1;
RecDefIdentList_1	-> ',' Ident RecDefIdentList_1
			-> .
			;

//--------------------------------------------
// Fundemental Declarations.  These are the
// base types that every thing is based on
//--------------------------------------------

FundDecl	-> 'BOOL' FundModifier FundDecl
			-> 'CHAR' FundModifier FundDecl
			-> 'BYTE' FundModifier FundDecl
			-> 'INT' FundModifier FundDecl
			-> 'CARD' FundModifier FundDecl
			-> 'RECORDTYPE' FundModifier FundDecl
			-> .
			;

FundModifier	-> FundPtrModifier FundModifier_1;
FundModifier_1	-> 'FUNC' FuncDef
				-> IdentList
				;

FundPtrModifier		-> FundArrayModifier FundPtrModifier_1;
FundPtrModifier_1	-> 'POINTER' FundArrayModifier
					-> .
					;

FundArrayModifier	-> 'ARRAY'
					-> .
					;


//----------------------------------
// Identifiers
//----------------------------------
IdentList	-> Ident IdentList_1;
IdentList_1	-> ',' Ident IdentList_1
			-> .
			;
Ident		-> 'IDENT' Options
			-> .
			;

Options		-> '=' CompConst
			-> '(' OptArrayDimension OptArrayInit
			-> .
			;

OptArrayDimension	-> CompConst ')';

OptArrayInit	-> '=' CodeBlock
				-> .
				;

//-------------------------------------------
// Parameter Declarations
//-------------------------------------------
ParamList	-> Param ParamList_1;
ParamList_1	-> ',' Param ParamList_1
			-> .
			;
Param		-> 'RECORDTYPE' POINTER IdentList
			-> 'CHAR' ParamModifier 
			-> 'BYTE' ParamModifier 
			-> 'INT' ParamModifier 
			-> 'CARD' ParamModifier 
			-> 'BOOL' ParamModifier 
			-> .
			;

ParamModifier	-> IdentList ParamModifier_1;
ParamModifier_1	-> 'POINTER' IdentList
				-> .
				;			
//-----------------------------------------------
// Local Variableas
//-----------------------------------------------

LocalDecls		-> 'CHAR' LocalModifier  LocalDecls
				-> 'BYTE' LocalModifier  LocalDecls
				-> 'INT' LocalModifier  LocalDecls
				-> 'CARD' LocalModifier  LocalDecls
				-> 'BOOL' LocalModifier LocalDecls
				-> 'RECORDTYPE' LocalModifier LocalDecls
				-> .
				;

LocalModifier	-> LocArrayModifier LocPtrModifier;
LocPtrModifier	-> 'POINTER' LocArrayModifier
				-> .
				;

LocArrayModifier	-> IdentList LocArrayModifier_1;
LocArrayModifier_1	-> 'ARRAY' IdentList
					-> .
					;
				;

//-------------------------------
// Compiler Constants
//-------------------------------
CompConst		-> BaseCompConst CompConst_1;
CompConst_1		-> '+' BaseCompConst CompConst_1
				-> '-' BaseCompConst CompConst_1
				-> .
				;
BaseCompConst	-> 'NUMBER'
				-> '*'
				-> '@' MemContents
				-> .
				;

//----------------------------------
//Variable References
//Memory References
//----------------------------------

MemContents			-> 'IDENT' MemContentsType
					-> .
					;
MemContentsType 	-> '(' ArrayIndex		//array ref
					-> '^'					// Pointer Dereference
					-> '.' MemContents		//record ref
					-> .
					;

ArrayIndex			-> ArithExpr ')';		//array index


//----------------------------------------
//  Inline assembly code
//----------------------------------------

//----------------------------------------
//	Statements
//----------------------------------------

AsmStmt			-> DefineMemory Processor_1;
Processor_1		-> 'PROCESSOR' ProcessorType DefineMemory Processor_1
				-> .
				;
ProcessorType	-> 'R6502'
				-> 'WD65C02'
				-> 'WD65C816'
				;

//-----------------------------------------
// Code
//		These statements are what actually
// do something that concerns the machine
// code that is executed
//-----------------------------------------

//-----------------------------------------
// SECITON
//-----------------------------------------
Section		-> Org Section_1;
Section_1	-> 'SECTION' Section_2 Org Section_1
				-> .
				;
Section_2	-> 'SECTION_NAME' Section_2
			-> SectionDef
			;
SectionDef		-> 'IDENT' SectionDef_1;
SectionDef_1	->'[' SectionAttributes
				-> ']'
				-> .
				;

SectionAttributes	-> SectionAtribute SectionAttributes_1;
SectionAttributes_1	-> ',' SectionAtribute SectionAttributes_1
					-> .
					;

SectionAtribute	-> 'START' '=' AsmConstant
				-> 'SIZE' '=' AsmConstant
				-> 'MODE' '=' Modes
				-> 'ZEROPAGE' '=' TrueFalse
				-> .
				;

Modes			-> 'READ_ONLY'
				-> 'READ_WRITE'
				;

TrueFalse		-> 'true'
				-> 'false'
				;

//-------------------------------------
// Org  Sets the location counter
// for the current section
//-------------------------------------
Org				-> DefineMemory Org_1;
Org_1			-> 'ORG' 'NUMBER' DefineMemory Org_1
				-> .
				;

//-------------------------------------
// DefineMemeory
//-------------------------------------
				
DefineMemory	-> DefineStorage DefineMemory_1;
DefineMemory_1	-> 'DB' AsmConstList DefineStorage DefineMemory_1 
				-> 'DW' AsmConstList DefineStorage DefineMemory_1
				-> 'DL' AsmConstList DefineStorage DefineMemory_1
				-> 'DAS' 'STRING' DefineStorage DefineMemory_1
				-> 'DCS' 'STRING' DefineStorage DefineMemory_1
				-> .
				;


//-------------------------------------
// DefineStorage
//-------------------------------------
DefineStorage	-> Proceedure DefineStorage_1;
DefineStorage_1	-> 'DS' AsmConstant Proceedure DefineStorage_1
				-> .
				;

//-------------------------------------
// Proceedure
//-------------------------------------
Proceedure		-> Instruction Proceedure_1;
Proceedure_1	-> 'PROC' Section 'EPROC' Instruction Proceedure_1
				-> .
				;

//--------------------------------------
// Opcodes
//--------------------------------------
Instruction		-> Labels Instruction_1;	
Instruction_1	-> 'ADC'  AluAdrModes	Labels Instruction_1 //ALU Opcodes		
				-> 'AND'  AluAdrModes	Labels Instruction_1
				-> 'EOR'  AluAdrModes	Labels Instruction_1	
				-> 'ORA'  AluAdrModes	Labels Instruction_1	
				-> 'CMP'  AluAdrModes	Labels Instruction_1
				-> 'SBC'  AluAdrModes	Labels Instruction_1	
				-> 'LDA'  AluAdrModes	Labels Instruction_1	
				-> 'STA'  StaAddressingModes Labels Instruction_1	
				-> 'ASL' ShiftAddressingModes	Labels Instruction_1			//shift addressing modes
				-> 'ROL' ShiftAddressingModes	Labels Instruction_1	
				-> 'LSR' ShiftAddressingModes	Labels Instruction_1 
				-> 'ROR' ShiftAddressingModes	Labels Instruction_1	 
				-> 'BCC' RelAddressingMode Labels Instruction_1				// Branch Op Codes
				-> 'BCS' RelAddressingMode Labels Instruction_1	 
				-> 'BEQ' RelAddressingMode Labels Instruction_1
				-> 'BMI' RelAddressingMode Labels Instruction_1
				-> 'BNE' RelAddressingMode Labels Instruction_1
				-> 'BPL' RelAddressingMode Labels Instruction_1
				-> 'BVC' RelAddressingMode Labels Instruction_1
				-> 'BVS' RelAddressingMode Labels Instruction_1
				-> 'BIT' BitAddressModes	Labels Instruction_1			//BIT opcode
				-> 'BRK'	Labels Instruction_1				//Implied Addressing Mode 
				-> 'CLC'	Labels Instruction_1	 
				-> 'CLD'	Labels Instruction_1	
				-> 'CLI'	Labels Instruction_1	
				-> 'CLV'	Labels Instruction_1	
				-> 'DEX'	Labels Instruction_1	
				-> 'DEY'	Labels Instruction_1	
				-> 'INX'	Labels Instruction_1	
				-> 'INY'	Labels Instruction_1	
				-> 'NOP'	Labels Instruction_1	
				-> 'PHA'	Labels Instruction_1	
				-> 'PLA'	Labels Instruction_1	
				-> 'PHP'	Labels Instruction_1	
				-> 'PLP'	Labels Instruction_1	
				-> 'RTI'	Labels Instruction_1	
				-> 'RTS'	Labels Instruction_1	
				-> 'SEC'	Labels Instruction_1	
				-> 'SED'	Labels Instruction_1	
				-> 'SEI'	Labels Instruction_1	
				-> 'TAX'	Labels Instruction_1	
				-> 'TAY'	Labels Instruction_1	
				-> 'TXA'	Labels Instruction_1	
				-> 'TYA'	Labels Instruction_1	
				-> 'TXS'	Labels Instruction_1	
				-> 'TSX'	Labels Instruction_1	
				-> 'INC' IncAddressingMOdes	Labels Instruction_1			//Inc/Dec Addressing Modes
				-> 'DEC' IncAddressingMOdes	Labels Instruction_1	
				-> 'JMP' JumpAddressingModes	Labels Instruction_1		// Jump
				-> 'JSR' CallAddressingMode	Labels Instruction_1			// Jump To Subroutine
				-> 'CPX'  CPX_CPY_AddressingMode	Labels Instruction_1	
				-> 'CPY'  CPX_CPY_AddressingMode		Labels Instruction_1
				-> 'LDX' LdxAddressingMode	Labels Instruction_1	
				-> 'LDY' LdyAddressingMode	Labels Instruction_1	
				-> 'STX' StxAddressingMode	Labels Instruction_1	
				-> 'STY' StyAddressingMode	Labels Instruction_1	
				-> .
				;

//---------------------------------------------
// Lables
//---------------------------------------------
Labels	-> 'IDENT' Label_1	//Global
		-> .
		;
Label_1	-> ':'		//private lable
		-> .
		;

//-----------------------------------
//ALU Addressing Mode
//-----------------------------------

AluAdrModes		-> '#' AsmConstant
				-> '(' Indirect
				-> AsmConstant OptIndexReg
				;
Indirect	-> AsmConstant  Indirect_1;
Indirect_1	-> ')' ',' 'YREG'
			-> ',' 'XREG' ')'
			;

//---------------------------------------------
// STA addressing mode
//---------------------------------------------
StaAddressingModes	-> AsmConstant OptIndexReg
					-> '(' Indirect
					;

//-----------------------------------------
// ASL LSR ROR and ROL addressing modes
//-----------------------------------------

ShiftAddressingModes	-> 'AREG'
						-> AsmConstant OptXReg
						;

//------------------------------------------
// Branch Instructions Addressing Mode
//------------------------------------------
RelAddressingMode	-> AsmConstant;

//------------------------------------------
// BIT Instructions Addressing Mode
//------------------------------------------

BitAddressModes	-> AsmConstant;

//------------------------------------------
// INC DEC Instructions Addressing Mode
//------------------------------------------

IncAddressingMOdes	-> AsmConstant OptXReg;

//------------------------------------------
// JMP Instructions Addressing Mode
//------------------------------------------

JumpAddressingModes	-> AsmConstant
					-> '(' AsmConstant ')'
					;

//------------------------------------------
// JSR Instructions Addressing Mode
//------------------------------------------

CallAddressingMode	-> AsmConstant;

//------------------------------------------
// LDX Instructions Addressing Mode
//------------------------------------------

LdxAddressingMode	-> AsmConstant OptYReg
					-> '#' AsmConstant
					;
//------------------------------------------
// CPX & CPY Instructions Addressing Mode
//------------------------------------------

CPX_CPY_AddressingMode	-> AsmConstant
					-> '#' AsmConstant
					;

//------------------------------------------
// STX Instructions Addressing Mode
//------------------------------------------

StxAddressingMode	-> AsmConstant OptYReg;

//------------------------------------------
// LDY Instructions Addressing Mode
//------------------------------------------

LdyAddressingMode	-> AsmConstant OptXReg
					-> '#' AsmConstant
					;

//------------------------------------------
// STY Instructions Addressing Mode
//------------------------------------------

StyAddressingMode	-> AsmConstant OptXReg;

//---------------------------------------------
//	Optional Index Registers
//---------------------------------------------

OptIndexReg		-> ',' OptIndexReg_1
				-> .
				;
OptIndexReg_1	-> 'XREG'
				-> 'YREG'
				;

OptXReg			-> ',' 'XREG'
				-> .
				;

OptYReg			-> ',' 'YREG'
				-> .
				;

//---------------------------------------
// Assembler Constants
//---------------------------------------
AsmConstList	-> 'STRING'
				-> AsmConstList_1
				;
AsmConstList_1	-> AsmConstant AsmConstList_2;
AsmConstList_2	-> ',' AsmConstant AsmConstList_2
				-> .
				;

AsmConstant		-> AsmConstAddSub AsmConstant_1;
AsmConstant_1	-> '>' AsmConstAddSub 	//Lower Part
				-> '<' AsmConstAddSub 	//Upper Part
				-> .
				;

AsmConstAddSub		-> BaseAsmConstant AsmConstAddSub_1;
AsmConstAddSub_1	-> '+' BaseAsmConstant AsmConstAddSub_1
					-> '-' BaseAsmConstant AsmConstAddSub_1
					-> .
					;

BaseAsmConstant	-> 'LOCAL_LABLE'
				-> 'GLOBAL_LABLE'
				-> 'IDENT'
				-> 'NUMBER'
				-> 'CHAR_CONSTANT'
				-> '*'				//current location counter
				;
